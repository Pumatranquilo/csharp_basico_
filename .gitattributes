using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Helloworld
{
    internal class Program
    {
        enum carros { Golf, Honda, Peugeot, Voyage }

        enum menu { Guerreiro = 1, Espadachim, Pirata, Explorador }
        static void Main(string[] args)
        {

            //1.TIPOS DE VARIÁVEIS:
            // int: tipo inteira (números inteiros) - 20 ou + 20;
            // float: tipo flutuante (números decimais) 1.2, 103.5;
            // bool: tipo lógico (verdadeiro ou falso);
            // string: tipo texto (palavras ou letras);
            // char: caractere (aspas simples) 'a', 'b', um único caractere.

            //2.REGRAS PARA VARIÁVEIS:
            //começar com letra;
            //não utilizar caracter especial (@#$ etc);
            //utilizar letras de a a z;
            //utilizar números de 0a 9;
            //não utilizar nomes reservados pelo c#;
            //pode utilizar _.

            /*int segundaGuerraMundial = 1942;
            string cor_favorita = "Azul";
            float velocidadeF1 = 294.48f;
            bool segundaGuerraMundialAconteceu = true;

            Console.WriteLine(segundaGuerraMundial);
            Console.WriteLine(cor_favorita);
            Console.WriteLine(velocidadeF1);
            Console.WriteLine(segundaGuerraMundialAconteceu);

            //3.ALTERAR O VALOR DE UMA VARIÁVEL: escrever apenas o nome da variável.
            velocidadeF1 = 300.80f;
            cor_favorita = "AZUL";

            Console.WriteLine(velocidadeF1);
            Console.WriteLine(cor_favorita);

            Console.ReadLine();*/

            //4.OUTRA FORMA DE DECLARAR VARIÁVEIS: utilizando "var"
            /*var corFavorita = "azul";
            var velocidadeF1 = 300.10;
            Console.WriteLine(corFavorita);
            Console.WriteLine(velocidadeF1);
            Console.ReadLine();*/

            //4.VARIÁVEIS DO TIPO DINÂNICO: "dynamic" (pode alterar o tipo)
            /*dynamic cor_favorita = "azul";
            Console.WriteLine(cor_favorita);
            cor_favorita = 100;
            Console.WriteLine(cor_favorita);*/

            /*Console.Write("Olá, mundo!\n"); //\n é utilizado para pular linha
           // Console.WriteLine("Código em desenvolvimento"); //writeline é utilizado para escrever e pular linha (o código fica mais limpo)
           // Console.Write("desenvolvendo um código");*/

            //6.CONSTANTES
            /* constantes são valores que não podem ser alterados ao longo do desenvolvimento
               de um software/programa. Para declarar uma constante utilizar "const" e em 
            seguida o tipo da constante (float, int, char, bool, string).
            EXEMPLO: fórmula para conversão de temperatura Celsius para Kelvin

            const float = 273.15 (273,15 é um valor constante do tipo float "decimal").*/

            //7.CAPTURAR ALGO QUE O USUÁRIO DIGITOU:
            /*para isto é preciso escrever as seguintes linhas de código
            string nome = "";
            Console.WriteLine("por favor escreva seu nome e em seguida aperte a tecla Enter:");
            nome = Console.ReadLine(); 
            Console.WriteLine("Seu nome é: ");
            Console.WriteLine(nome);*/

            // 8.OPERADORES ARITMÉTICOS

            /* Os operadores matemáticos/aritméticos são os sinais
             + adição;
            - subtração;
            * vezes/multiplicação;
            / divisão.
            Para efetuar operações matemáticas basta declarar o tipo de variável no início,
            int para números inteiros (1, 2, 10, 30, 100, 40000 etc) ou float para números
            decimais (20.1, 1.3, 0.4, 0.0403241, 10000.001, etc). Obs.: algo que esqueci de 
            mencionar é que durante o desenvolvimento do seu programa sempre utilize o
            "." ponto e não a "," vírgula para representar valores/resultados/números com 
            casas decimais. isto ocorre porque a linguagem de programação utilizada usa o
            idioma inglês como lingua nativa e no sistema inglês/norte americano utiliza-se
            o ponto para representar valores fracionários/decimais e a vírgula para unidades
            de milhar ao contrário do padrão brasileiro.
            EXEMPLOS: sietema americano 10,000 dez mil
            0.1 zero ponto um (zero vírgula um no Brasil).
            Porém o resultado exibido será o valor convertido para o sistema nacional, porque
            durante o processo de complilação entende-se a região onde você está desenvolvendo
            seu programa, ou seja, se o seu computador está no Brasil, na África, na China ou no Canadá por exemplo.

            Operações matemáticas:
            int opAdd = 10 + 10;
            int opSub = 10 - 10;
            int opMul = 10 * 10;
            int opDiv = 10 / 10;
            int opDiv2 = 10 / 11;
            float opDiv3 = 10f / 11;
            float opDiv4 = 10 / 11f;

            Console.WriteLine(opAdd);
            Console.WriteLine(opSub);
            Console.WriteLine(opMul);
            Console.WriteLine(opDiv);
            Console.WriteLine(opDiv2);
            Console.WriteLine(opDiv3);
            Console.WriteLine(opDiv4);*/

            /* Percebam que para as operações "int opDiv, 2, 3 e 4" linhas 107 a 110 eu extrapolei
             as possibilidades, para poder demonstrar os resultados que podem surgir. Na primeira
            operação para divisão estamos dividindo dez por dez e isto resulta em 1, um número inteiro,
            notem que no início da variável eu a declarei como inteira "int" e ao efetuar divisões que
            resultam em números inteiros isto não será um problema 4/2, 10/2, 10/10 etc. Porém ao efetuarmos
            calculos que exigem uma precisão maior teremos resultados incertos, por exemplo 10/11 = 0 na
            linha 108, uma vez que, 10/11 resulta aproximadamente 0,90. O rsultado 0 obtido neste caso é
            devido ao modo como declaramos a variável, ao declarar variável do tipo int e efetuar operações
            que resultam em valores do tipo float (decimal) ao arredondar o número a ferramenta a qual 
            estamos utilizando (c#) ignora todos os demais valores depois da vírgula (à direita da vírgula)
            por exemplo os dígitos 9090909.
            Para solucionar e evitar este imprevisto e proporcionar resultados mais exatos utilizamos variá-
            veis do tipo float para divisão e escrevemos a letra "f" em um dos valores envolvidos na operação.*/

            //9. CONDIÇÕES

            /*As condições são represantadas por sinais como:
             > maior que;
            < menor que;
            >= maior ou igual;
            <= menor ou igual;
            == igual;
            != diferente.
            Estes símbolos representam uma verificação e resultam em um valor lógico,
            podendo ser verdadeiro ou falso. É importante durante este aprendizado utilizar
            os modelos a partir do fluxograma, pois estes ajudam a entender como estas condições atuam.
            Exemplos: 1<2 verdadeiro;
            10<2 falso e assim por diante.*/

            //10.ESTRUTURAS CONDICIONAIS
            /* As estruturas condicionais são utilizadas para verificar se uma linha de comandos
             é verdadeira.
            Utilizamos as seguintes estruturas condicionais:
            if (se);
            else (senão);
            else if (senão se); 
            para o comando Console.WriteLine() utilizar o bloco {}
            Exemplos:
           
            if (10 <= 0) 
            {
                Console.WriteLine("Verdadeiro, dez é maior que zero."); 
            }

            if (10 < 2)
            {
                Console.WriteLine("verdadeiro, dois é menor que dez.");
            }

            else if é colocado antes de else

            else if (2 == 1)
            {
                Console.WriteLine("else if acionado, 2 é igual a 2");
            }
            else if (5 != 5)
            { 
                Console.WriteLine("else if acionado, 5 é diferente de 9");
            }

            //o else é utilizado quando o if resulta em um valor falso.
            else
            {
                Console.WriteLine("Falso, dez não é menor que dois");
            }*/

            /* nós também podemos declarar variáveis antes destas estruturas que ajudam
            a facilitar durante a codificação
            exemplo
            int a = 10;
            int b = 20;
            int c = 30;
            float d = 12.48f;

            if (a == d)
            {
                Console.WriteLine("verdadeiro");
            }
            else
            {
                Console.WriteLine("a variável d é um número decimal = 12,48");
            }*/

            //11.OPERADORES CONDICIONAIS "E" E "OU"

            /* Os operadores condicionais "e" e "ou" são utilizados para impor mais de uma
              condição para que uma nova ação seja encadeada. Antes de ver isto em prática
            vamos analisar quais as possibilidades temos ao utilizar estes operadores condicionais:
            o operador e é representado por &&;
            o operador ou é representado por ||.
            POSSIBILIDADES:
            E
            v e v = v
            v e f = f
            f e v = f
            f e f = f
            note que para o resultado ser verdadeiro as duas condições precisam ser verdadeiras. Se para
            desenvolver um motor gráfico por exemplo você precisar de um computador e uma linguagem de
            programação, caso você não tenha um destes dois requisitos (v e v) o resultado será falso :(,
            não sendo possível o desenvolvimento de um motor gráfico. Porém se você tiver o computador
            e acesso a uma linguagem de programação o resultado será verdadeiro (v e v = v) :).
            Portanto uma das duas condições for falsa o resultado também é falso, devido ao operador
            "e", este operador exige que uma condição E outra condição sejam verdadeiras para
            um resultado verdadeiro.

            OU
            v ou v = v
            v ou f = v
            f ou v = v
            f ou f = f
            Já no operador condicional "ou" basta que uma condição seja verdadeira
            para que o resultado tembém seja verdadeiro, exemplo imagine que você precisa ir
            comprar pão e existem duas possibilidades (duas padarias) a padaria 1 e a padaria 2.
            Para que você consiga comprar seus pães existem duas possibilidades a padaria 1 OU a
            padaria 2, se em uma padaria já estiver acabado os pães você pode ir na outra. Porém
            caso não haja pão em nenhuma das duas (f ou f) o resultado será falso e você não conseguirá 
            comprar pão.*/

            /*int a = 10;
            int b = 20;
            int c = 30;
            float d = 10.02f;

            if (a < b && c > d)
            {
                Console.WriteLine("verdadeiro");
            }
            else
            {
                Console.WriteLine("falso");
            }*/


            /*int a = 10;
            int b = 20;
            int c = 30;
            float d = 10.02f;

            if (a < b || c == d)
            
            //a é menor que b (10 < 20) verdadeiro
            //mas c não é igal a d (c = 30) (d = 10,02),
            //porém como utilizamos o operador || (ou) o resultado é verdadeiro
           
            {
                Console.WriteLine("verdadeiro");
            }
            else
            {
                Console.WriteLine("falso");
            }*/

            //12 UTILIZANDO OPERADORES E CONDÇÕES EM UM PROGRAMA (PRÁTICA)
            /* Nestas linhas de código vamos estar utiizando o que aprendemos até aqui
             para desenvolver um programa que verifica a idade de um usuário e retorna uma mensagem
            informando se este usuário é criança, adolescente ou adulto*/

            /*Console.WriteLine("Olá usuário. Por favor digite a sua idade e em seguida a tecla Enter.");
            int idade = int.Parse(Console.ReadLine());

            if (idade >= 0 && idade <= 11)
            {
                Console.WriteLine("Você é criança.");
            }

            else if (idade >= 12 && idade <= 17)
            {
                Console.WriteLine("Você é adolescente.");
            }
            else
            {
                Console.WriteLine("Você é adulto");
            } 

            /* Amalisando o código acima: podemos notar que neste software acima utilizamos 
             algo novo, o termo "Parse" int.Parse é utilizado para converter os valores numéricos
            digitados pelo usuário em texto, uma vez, que o c# interpreta todas as entradas como texto.
            Além do mais utilizamos 3 possibilidades para o nosso programa:
            if (se) o usuário tiver entre 0 e 11 anos ele é criança;
            else if (senão, se) entre 12 e 17 anos, é um adolescente;
            else (senão) caso nenhuma destas condições sejam verdadeiras, acima de 17 anos
            o usuário é adulto.
            Aproveita para praticar e utilize este mesmo programa para verificar outras possibilidades
            como um tanque de combustível com condições indicando ao motorista se já está na hora
            de abastecer ou não, ou para verificar tarefas do dia da semana */

            // 13 FUNÇÕES
            /* As funções são utilizadas para otimizar o nosso código em termos de linhas de programação.
               No exemplo acima note que escrevemos diversas linhas para serem exibidas para o usuário, 
            utilizando funções descartamos a necessidade de escrever as mensagens linha por linha e atri-
            buir estas mensagens a uma variável.
            Vejamos o exemplo a seguir de como elaborar uma função:
            para isto utilizamos a palavra "static" (função do tipo static), em seguida "void" (tipo
            de função vazia) e atribuímos um nome para esta função com (). 

            Mensagem(); //funções
             Mensagem2(); // podemos "chamar" uma função mais de uma vez (útil para evitar escrever a mesma frase várias vezes).
            Mensagem3(); 
              Mensagem3();
            Mensagem();
              Mensagem2();

            mostrarDia(10);// parâmetro da função mostrarDia

            estoqueProduto("sabão ", 14.9f);
            estoqueProduto2("shampoo ", 500);

            calculoFornecedor(100);
            calculoFornecedor(-70);
            calculoFornecedor(90);
            calculoFornecedor(205.15f);


            Console.ReadLine();
        }         
                static void Mensagem() //atribuindo funções 
         {
             Console.WriteLine("Olá _________(campo com o nome do usuário.");
            Console.WriteLine("Não temos reuniões agendadas para hoje.");
        }
                static void Mensagem2()
         {
             Console.WriteLine("Olá_________(campo com o nome do usuário.");
            Console.WriteLine("Hoje temos uma reunião agendada para as 14:35.");
        }
                static void Mensagem3()
         { 
             Console.WriteLine("Olá_________(campo com o nome do usuário.");
            Console.WriteLine("Hoje temos uma reunião agendada para às 22:47.");
        } 
        
        static void mostrarDia(int dia) //nesta finção foi atribuído um parâmetro (dentro dos párênteses).
        {
            Console.WriteLine(dia); 
        }

        static void estoqueProduto(string prod, float qnt)
        {
            Console.WriteLine("Nome do produto e quantidade: " + prod + qnt + " kg"); //nesta linha de código utilizei um novo recurso, a concatenação (junção, união) através do sinal de "+" para unir dois ou mais trechos ou textos.
            
        }
        static void estoqueProduto2(string prod, float qnt)
        {
            Console.WriteLine("Nome do produto e quantidade: " + prod + qnt + " ml");
        }

        static void calculoFornecedor(float preco)
        {
            float precoFornecedorAbs = Math.Abs(preco);//utilizei esta fu~ção para evitar calcular números negativos, na linha 328 determinei como -70 o preço mas percebam que mesmo assim o calculo ignorou o valor negativo. Portanto se o usuário digitar acidentalmente um valor negativo o programa entenderá como um valor positivo.
            float precoFornecedor = precoFornecedorAbs - 40;
            Console.WriteLine("Preço real do produto: " + " R$ " + precoFornecedor);
        }*/

            //14 RETORNANDO FUNÇÕES
            /* Os retornos de funções são utilizados quando queremos retornar um valor para o usuário
             após  o nosso programa efetuar o registro de algo, para isto utilizamos um tipo de função
            esta função pode ser do tipo int, float, string, bool ou char dependo do tipo de entrada
            que vamos trabalhar. A seguir vou estar exemplificando alguns cálculos matemáticos utilizando
            retorno e função


            int soma = Somar(1, 2, 3);
            Console.WriteLine(soma);

            float multi = Multiplicar(10.2f, 2.05f, 1.85f);
            Console.WriteLine(multi);

            Console.ReadLine();
        }
        static int Somar(int a, int b, int c)

        {
            int somaFinal = a + b + c;
            return somaFinal;//atribuição do retorno da função
        }

        static float Multiplicar(float x, float y, float z)
        {
            float multiFinal = x * y * z;
            return multiFinal;
        }*/

            // 15 ARRAYS
            /* Um array "[]" (símboloo utilizado) é uma forma de evitar a repetição quando precisamos declarar diversos
             itens, de uma forma inicial teríamos que declarara as variáveis uma por uma, porém
            ao utilizarmos arrays basta definir um método array e dentro do mesmo definir um valor
            (quantidade de itens descritos) e em seguida escrevermos os itens

            string[] itens = new string[8]//definir um valor de itens, precisa ser exatamente a mesma quantidade, porém a contagem começa a partir do número zero.
            {
                "chápeu",//0
                "pedra",//1
                "árvore",//2
                "fonte",//3
                "escada",//4
                "baú",//5
                "corrente",//6
                "adaga",//7
            }; 
             

            itens[2] = "pinheiro"; //campo utilizado para trocar/atualizar o nome do item sem precisar acessar o bloco entre"{}".
            Console.WriteLine(itens[2]);//local onde digitamos o número correspondente ao item
            
            Console.ReadLine();

            int[] numeros = {1, 20, 80, 35, 800};//outra maneira de construir arrays.
        }*/

            // 16 SWITCH
            /* Basicamente este tipo de estrutura condicional (switch) pode ser utilizado da mesma forma
             que utilizamos o if, o else e o else if. Porém quando precisamos repetir muitas sentenças
            podemos utilizar as condições "switch", pois elas nos ajudam a obter linhas de código mais organizadas
            além de proporcionar maior eficiência no desenvolvimento do nosso programa.
            Abaixo estarei demonstrando como elaboramos este tipo de estrutura utilizando switch:

            {
                string nome = "Amanda"; //definimos uma variável (float, string, int etc);

                switch (nome) //estrutura condicional com a variávem;
                {
                    case "Bruno":// a partir daqui o switch irá verificar cada "case" (caso) para encontrar qual linha lógica/de código corresponde à função nome;
                        Console.WriteLine("Seu nome é Bruno.");
                        break;

                    case "Antonio":
                        Console.WriteLine("Seu nome é Antonio.");
                        break;

                    case "Amanda":
                        Console.WriteLine("Amanda");
                        break;

                    case "Flávio":
                        Console.WriteLine("Seu nome é Flávio.");
                        break;

                    default://este default é utilizado para otimizar o programa, ou seja, caso o switch não encontre nada que corresponda com a variável nome no caso "Amanda" irá ser exibida uma mensagem no console do usuário.
                        Console.WriteLine("Nenhum nome corresponde à variável nome");
                        break;
                }
                Console.ReadLine();//efetuem o exercício de substituir o nome da variável "Amanda" em (string nome = "Amanda") pelos nomes dos casos e substituir também por um nome que não está em nenhum dos casos.
            }*/

            //17 ENUM
            /* Enum de enumerador ou enumeradores (isto ocorre devido ao fato de que para cada valor escrito dentro do enum o c# atribui um número) em pottuguês é uma forma simples de trabalharmos com 
             variáveis em nosso programa, quando definimos um enum, dentro dele escrevemos tudo o que
            estará contido em uma variável x hipotética e toda vez que utilizarmos esta variável ela estará
            limitada somente ao que definimos dentro do enum. Observação! O enum está escrito na linha
            de código número 11
                
            {
                carros nomeCarro = carros.Golf;
                Console.WriteLine(nomeCarro);
            }
            Console.ReadLine();
        }*/

            //18 ENUM INTERAGINDO COM SWTCH 
            /*Nesta parte do código desenvolvido vamos estar acompanhando como o enum pode interagir
             com switch e para isto vamos estar elaborando um menu que irá exibir no console algumas
            opções para que o usuário possa escolher, vamos determinar números e quando o usuário
            digitar um dos números corresponderá a um personagem selecionado. Na linha de código número 13
            já deixei escrito a linha enum com a variável "menu" e os personegens, notem que para o primeiro
            personagem digitei "= 1" logo após o nome, se não fizermos isto caso o usuário optar por selecionar
            o guerreiro e digitar 1 no console/menu será selecionado o espadachim e isto se deve porque o enum começa a contar a partir
            do "0", portando ele "entenderá" que o usuário quis selecionar o segundo item e uma maneira de controlar isto é atribuindo um número para o que estiver atribuído ao enum.

            Console.WriteLine("Olá usuário, por favor selecione uma das opções a seguir para continuar e em seguida aperte a tecla Enter:");
            Console.WriteLine(" 1 - Guerreiro\n 2 - Espadachim\n 3 - Pirata\n 4 - Explorador\n"); //ao utilizar "\n" estamos codificando para que o texto ou frase pule uma linha, ou seja, o próximo item será escrita uma linha abaixo.

            int index = int.Parse(Console.ReadLine()); //linha de código para capturar o que o usuário irá digitar/selecionar. Como estamos utilizando valores numéricos utilizamos "Parse" para fazer a conversão para texto.
            menu personagemSelecionado = (menu)index;

            // Console.WriteLine(menuSelecionado);//até aqui não utilizamos o switch neste menu. Ao atribuir o switch para o menu deixe esta linha como comentário para que não haja conflitos dentro so programa.


            switch (personagemSelecionado)//capturar o que o usuário selecionou
            {
                case menu.Guerreiro://caso selecionar guerreiro escrever algo na próxima linha
                    Console.WriteLine(" Você selecionou o guerreiro. Deseja confirmar e continuar?");//caso uma opção seja selecionada algo será exibido no console/menu
                    break;//conclusão/parada para que o programa não prossiga de forma indefinida.
                          
                case menu.Espadachim:
                    Console.WriteLine(" Você selecionou o espadachim. Deseja confirmar e continuar?");
                    break;

                case menu.Pirata:
                    Console.WriteLine(" Você selecionou o pirata. Deseja confirmar e continuar?");
                    break;

                case menu.Explorador:
                    Console.WriteLine(" Você selecionou o explorador. Deseja confirmar e continuar?");
                    break;

                default:
                    Console.WriteLine("Esta opção não está disponível, por favor selecione uma das opções disponíveis.");
                    break;
            }
            Console.ReadLine();

        }*/

            //19 WHILE
            /* A estrutura de comando do tipo while é muito utilizada quando queremos atribuir uma
             repetição em nosso código/programa, uma vez que, a estrutura while é uma estrutura de repetição
            e um bom exemplo seria associar esta esta estrutura ao desenvolvimento de um contador, pois enquanto
            "while" a condição for verdadeira o programa continuará executando o que estiver contido entre "{}"  (o bloco de comando).

            int contador = 0;

            while (contador </*=ao adicionar o sinal de igual logo após o < o contador irá contar até o número dez 10)//repetição/loop infinito.
            {
              
                Console.WriteLine("Contagem iniciada incrementando +1");//lógica de repetição
                Console.WriteLine(contador +1);//qual número o contador está
                contador = contador + 1;//limitador para a condição não ficar infinitamente em loop. nesta linha de código definimos que pós o contador contar zero e exibix a mensagem no console será incrementado/acrescentado +1 ao contador e isso se repete até chegar ao valor 9 quando a condição se torna falsa e o contador para e segue para fora do bloco, onde exibe a próxima mensagem.
                //contador+=1;// outra maneira de adicionar o +1 à variável contador;
                //contador++;//outra maneira de adicionar o +1 à variável contador.
            }
            Console.WriteLine("A contagem chegou ao fim contador = 9. O contador para em 9 por que a condição\nwhile só irá ser executada enquanto contador < que 10.");
            Console.ReadLine();
        }*/

            //20 DO WHILE
            /* Enquanto a condição while executa o código primeiro e só depois verifica se existe uma condição falsa,
             a condoção do while que vamos abordar neste tópico interage de forma inversa, primeiro ela verifica
            o código, pelo menos uma vez, e só então após isto ela executa o código

            int contadorverdadeiro = 0;
            do
            {
                Console.WriteLine("Verificando o código primeiro para encontrar condições falsas.");
                Console.WriteLine(contadorverdadeiro + 1);
                contadorverdadeiro++;
            }
            while (contadorverdadeiro < 100);
            //while (10 < 0);//nesta situação o código é executado mesmo a condição sendo falsa, pois 10 não é menor que zero.

            Console.WriteLine("Fim da execussão.");

            Console.ReadLine();
        }*/

            //21 FOREACH
            /*A estrutura "foreach" é uma maneira de exibir uma sequência de arrays. Muito útil para
             a elaboração de menus

            string[] personagens = { "explorador", "pirata", "médico" };

            foreach (string personagem in personagens) //linha de código referente à estrutura foreach
            {
                Console.WriteLine(personagem);
            }
            Console.ReadLine();
        }*/

            //22 FOR
            /* A estrutura de repetição "for" também pode ser utilizada da mesm maneira ou para os mesmos
             fins que utilizamos a estrutura "while" no desenvolvimento de um contador. Porém ao utilizarmos
            a estrutura "for", mbora seja um pouco mais complexa para escrever a linha de código a sua
            estrutura é mais limpa, pois necessita de menos linhas de código que a estrutura "while".

            for (int contador = 0; contador < 100; contador++)
            {
                Console.WriteLine(contador +1);
                Console.WriteLine("Executando o contador.");
            }
            Console.ReadLine();
        }*/

            //23 ESCOPO
            /*Este tipo de estrutura é utilizado quando queremos o u precisamos interagir de maneira
             mais flexivel com variáveis dentro do programa. As variáveis geralmente são elaboradas de forma
            local, ou seja, estas variáveis só podem ser acessadas dentro da função ou bloco de códigos 
            a qual aquela variável pertence, caso haja a necessidade de acessar/escrever esta variável em
            uma outra linha de código fora da sua função inicial irá ocorrer erro em nosso código e a
            variável não será acessada. Para solucionar isto utilizamos o tipo de escolo global, onde
            ao desenvolver/escrever uma nova variável esta poderar ser acessada em outros locais 
            do nosso programa

            static string variavelglobal = "acessoglobal";//modo de declaração de uma variável global para que possamos acessá-la em outros locais dentro do programa.

    }
}*/
